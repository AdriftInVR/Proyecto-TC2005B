<%- include('partials/header.ejs') %>
<%- include('partials/spinner.ejs') %>
    
<body>
    <div class="h-[main] w-full flex justify-center p-8">
        <div class="w-1/3 bg-white">
            <div class="sticky top-[10vh]">    
                <input type="radio" id="pj" name="graph_selection" value="project" onchange='EpicToggle()' checked>
                <label for="project">By Project</label>&nbsp;
                <input type="radio" id="ep" name="graph_selection" value="epic" onchange='EpicToggle()'>
                <label for="epic">By Epic</label><br>
            </div>
            <section id ='projectDiv' class="sticky top-[15vh]">
                Project: 
                <select id="projects">
                    <% let i = true %> 
                    <% for (project of projects) { %>
                        <option value="<%= project.ProjectID %>" <% if (i) { %> selected <% i = false  } %>><%= project.ProjectName %></option>
                    <% } %>
                </select>
            </section>
            <section id='epicDiv' style="visibility:hidden" class="sticky top-[20vh]">
                Epics: 
                <select id="epics">
                    
                </select>
            </section>
        </div>

        <div class="w-2/3">
            
            <div class="p-16">
                <canvas id ='burnupAP'></canvas>
            </div>
            <div class="p-16">
                <canvas id ='frontBackAP'></canvas>
            </div>
            <div class="p-16">
                <canvas id="statusPie"></canvas>
            </div>

            <div class="p-16">
                <canvas id ='weeklyAP'></canvas>
            </div>
        </div>
    </div>
    
</body>
<%- include('partials/endHTML.ejs') %>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    // Este script cambia la visibilidad del dropdown de Epics
    function EpicToggle(flag) {
        var div = document.getElementById('epicDiv');
        if (div.style.visibility == "hidden"){
            div.style.visibility = "visible";
            ChartAll();
        }
        else {
            div.style.visibility = "hidden";
            ChartAll();
        }
    }
</script>

<script>
    // Este script asigna los valores del dropdown de Epics, y los cambia al cambiar el dropdown de proyecto
    window.onload = (event) => {
        SetEpicOptions();
        ChartAll()
    }
    $("#projects").change(function (event) {
        SetEpicOptions();
        ChartAll();
    });
    $("#epics").change(function (event) {
        ChartAll();
    });
    function SetEpicOptions() {
        epicOptions = '';
        fetch('/data/project/epics/' + $("#projects").val(), {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(epics => {
            let j = true;
            for (let epic of epics.status) {
                epicOptions += "<option value='" + epic.EpicID + "'";
                if (j) {
                    epicOptions += " selected"
                    j = false;
                }
                epicOptions += ">" + epic.EpicName + "</option>";
            };
            document.getElementById("epics").innerHTML = epicOptions
        })
    }
</script>

<script>
    // Estos scripts crean graficas de Pie para los diferentes estatus de un proyecto o Epic
    var pieChart;
    function ProjectPieChart(projectID){
        if (pieChart) {
            pieChart.destroy();
        }    
        const pie = document.getElementById('statusPie');
        fetch('/data/project/status/' + projectID, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(data => {

            let data_labels = [];
            let data_count = [];
            for (let tag of data.status) {
                data_labels.push(tag.Nombre);
                data_count.push(tag.Cantidad);
            }
            const PIEchart = {
                labels: data_labels,
                datasets: [{
                    data: data_count,
                    backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)',
                    'rgb(54, 252, 132)',
                    'rgb(90, 218, 232)',
                    'rgb(195, 121, 237)'
                    ],
                    hoverOffset: 4
                }]
            };
            const config = {
                type: 'pie',
                data: PIEchart,
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Task for State'
                        },
                    },
                    responsive: true,                    
                }
            };
            pieChart = new Chart(pie, config);
        })
    }
    
    function EpicPieChart(epicID){
        if (pieChart) {
            pieChart.destroy();
        }  
        const pie = document.getElementById('statusPie');
        fetch('/data/project/epic/status/' + epicID, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(data => {
            let data_labels = [];
            let data_count = [];
            for (let tag of data.status) {
                data_labels.push(tag.Nombre);
                data_count.push(tag.Cantidad);
            }
            const PIEchart = {
                labels: data_labels,
                datasets: [{
                    data: data_count,
                    backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)',
                    'rgb(54, 252, 132)',
                    'rgb(90, 218, 232)',
                    'rgb(195, 121, 237)'
                    ],
                    hoverOffset: 4
                }]
            };
            const config = {
                type: 'pie',
                data: PIEchart,
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'Task for State'
                        },
                    },
                    responsive: true,                    
                }
            };
            pieChart = new Chart(pie, config);
        })
    }
</script>

<!--BURN UP AP-->
<script>
    // Estos scripts crean graficas de Linea para los AP completados en una semana
    var burnupChart;


    function getProjectAP(projectID, start, end, APdata, i) {
        fetch('/data/project/completeAP/' + projectID + "/" + start.toISOString() + "/" + end.toISOString(), {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
            }).then(result => {
                return result.json();
            }).then(data => {
                if (data.status[0]) {
                    APdata[i] = data.status[0].WeekAP;
                } else {
                    APdata[i] = 0;
                }
            }
        )
    }


    function getEpicAP(epicID, start, end, APdata, i) {
        fetch('/data/project/epic/completeAP/' + epicID + "/" + start.toISOString() + "/" + end.toISOString(), {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
            }).then(result => {
                return result.json();
            }).then(data => {
                if (data.status[0]) {
                    APdata[i] = data.status[0].WeekAP;
                } else {
                    APdata[i] = 0;
                }
            }
        )
    }

    function totalAPProject(projectID, end, i, APdata){
        fetch("data/project/totalAP/" + projectID + "/" + end.toISOString(),{    
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }, 
        }).then(result => {
            return result.json();
        }).then(data =>{
            if (data.status[0]) {
                APdata[i] = data.status[0].TotalAP;
            } else {
                APdata[i] = 0;
            }
        })
    }


    //Actualiza datos
    function BurnupLineChart(projectID) {
        if (burnupChart) {
            burnupChart.destroy()
        }
        const buap = document.getElementById('burnupAP');
        fetch('/data/project/estimate/' + projectID, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(estimateData => {
            let data_labels = [0];
            let data_values = new Array (estimateData.status[0][0].Estimate);
            let data_completeAP = new Array (estimateData.status[0][0].Estimate);
            let dataValuesExpected = new Array (estimateData.status[0][0].Estimate);
            var start = new Date(estimateData.status[0][0].Inicio);
            var end = new Date(start);
            end.setDate(end.getDate() + 7);
            


            for (i=0;i<estimateData.status[0][0].Estimate;i++){
                data_labels.push(i+1);
                console.log(end.toISOString())
                getProjectAP(projectID, start, end, data_completeAP, i);
                totalAPProject(projectID, end, i, data_values);
                start.setDate(start.getDate()+7);
                end.setDate(end.getDate()+7);
            }
            
            
            //calculate expected line
            /*let apPerWeek = estimateData.aptotales / estimateData.stimate[0][0].Estimate;
            let totalApAux = 0;
            for(i in data_labels){                
                dataValuesExpected.push(totalApAux);
                totalApAux += apPerWeek;
            }*/
            setTimeout(() => {
                for (i=1;i<data_completeAP.length;i++){
                    data_completeAP[i]+=data_completeAP[i-1]
                }
                console.log(data_values)
                let completeLine = [0].concat(data_completeAP);
                const APBurnUp = {
                    labels: data_labels,
                    datasets: [/*{
                        /*type: 'line',
                        label: 'Expected',
                        data: dataValuesExpected,
                        borderColor: '#0E57FF',
                        backgroundColor: 'rgba(0, 0, 0, 0)'
                    },*/ {
                        type: 'line',
                        label: 'Goal',
                        data: data_values,
                        fill: false,
                        borderColor: '#FF0000'
                    },
                    {
                        type: 'line',
                        label: 'Complete',
                        data: completeLine,
                        fill: false,
                        borderColor: '#FEE214'
                    }]
                };

                const configura = {
                    type: 'line',
                    data: APBurnUp,
                    options: {
                        scales:{
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: 'Burn up AP'
                            },
                        },
                        responsive: true,                    
                    } 
                };
                burnupChart = new Chart(buap, configura);
            }, "300")
        })
    }   
</script>


<script>
    // Estos scripts crean graficas de Linea para los AP completados en una semana
    var APlineChart;

    

    

    function WeeklyAPLineChart(projectID){
        if (APlineChart) {
            APlineChart.destroy();
        }    
        const ap = document.getElementById('weeklyAP');
        fetch('/data/project/estimate/' + projectID, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(estimateData => {
            let weekly = new Array(estimateData.status[0][0].Estimate);
            let data_labels = [0];
            const projectStart = new Date(estimateData.status[0][0].Inicio);
            var start = projectStart;
            var end = new Date(start);
            end.setDate(start.getDate()+7);
            for (i=0;i<estimateData.status[0][0].Estimate;i++){
                data_labels.push(i+1);
                getProjectAP(projectID, start, end, weekly, i);
                start.setDate(start.getDate()+7);
                end.setDate(end.getDate()+7);
            }
            
            setTimeout(() => {
                let APdata = [0].concat(weekly)
                const WEEKLYchart = {
                    labels: data_labels,
                    datasets: [{
                        label: "AP Completed Each Week",
                        data: APdata,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                };
                const config = {
                    type: 'line',
                    data: WEEKLYchart,
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                };
                APlineChart = new Chart(ap, config);
            }, "100");
        })
    }
    
    function EpicWeeklyAPLineChart(epicID){
        if (APlineChart) {
            APlineChart.destroy();
        }    
        const ap = document.getElementById('weeklyAP');
        fetch('/data/project/estimate/' + $('#projects').val(), {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(estimateData => {
            let weekly = new Array(estimateData.status[0][0].Estimate);
            let data_labels = [0];
            const projectStart = new Date(estimateData.status[0][0].Inicio);
            var start = projectStart;
            var end = new Date(start);
            end.setDate(start.getDate()+7);
            for (i=0;i<estimateData.status[0][0].Estimate;i++){
                fetchLock = true;
                data_labels.push(i+1);
                getEpicAP(epicID, start, end, weekly, i);
                start.setDate(start.getDate()+7);
                end.setDate(end.getDate()+7);
            }
            setTimeout(() => {
                let APdata = [0].concat(weekly)
                const WEEKLYchart = {
                    labels: data_labels,
                    datasets: [{
                        label: "AP Completed Each Week",
                        data: APdata,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                };
                const config = {
                    type: 'line',
                    data: WEEKLYchart,
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                };
                APlineChart = new Chart(ap, config);
            }, "300");
        })
    }
</script>

<script>
    var barChar;
    function areasBarChart(projectID){
        if (barChar) {
            barChar.destroy();
        }    
        const bar = document.getElementById('frontBackAP');
        fetch('/data/project/area/' + projectID, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(data => {
            let data_labels = ['Frontend','Backend'];
            let data_countComplete = [data.completeFront,data.completeBack];            
            let data_countTotal = [data.allFront,data.allBack];            
        
            const BARchart = {
                labels: data_labels,
                datasets: [
                    {
                        label: 'Complete',
                        data: data_countComplete,
                        backgroundColor: ['rgb(255, 99, 132)'],
                        hoverOffset: 4
                    },
                    {
                        label: 'Total',
                        data: data_countTotal,
                        backgroundColor: ['rgb(54, 162, 235)'],
                        hoverOffset: 4
                    }
                ]
            };
            const config = {
                type: 'bar',
                data: BARchart,
                options: {
                    plugins: {
                    title: {
                        display: true,
                        text: 'Frontend Backend Completed Tasks'
                    },
                    },
                    responsive: true,
                    scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                    }
                }
            };
            barChar = new Chart(bar, config);
        })    
    }
    function areasBarChartEpic(epicID){
        if (barChar) {
            barChar.destroy();
        }    
        const bar = document.getElementById('frontBackAP');
        fetch('/data/project/epic/area/' + epicID, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(result => {
            return result.json();
        }).then(data => {
            let data_labels = ['Frontend','Backend'];
            let data_countComplete = [data.completeFront,data.completeBack];            
            let data_countTotal = [data.allFront,data.allBack];               
        
            const BARchart = {
                labels: data_labels,
                datasets: [
                    {
                        label: 'Completadas',
                        data: data_countComplete,
                        backgroundColor: ['rgb(255, 99, 132)'],
                        hoverOffset: 4
                    },
                    {
                        label: 'Total',
                        data: data_countTotal,
                        backgroundColor: ['rgb(54, 162, 235)'],
                        hoverOffset: 4
                    }
                ]
            };
            const config = {
                type: 'bar',
                data: BARchart,
                options: {
                    plugins: {
                    title: {
                        display: true,
                        text: 'Frontend Backend Completed Tasks'
                    },
                    },
                    responsive: true,
                    scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true
                    }
                    }
                }
            };
            barChar = new Chart(bar, config);
        })    
    }
</script>

<script>
    function ChartAll() {
        if (document.getElementById('epicDiv').style.visibility == "hidden") {
            ProjectPieChart($("#projects").val());
            WeeklyAPLineChart($("#projects").val());
            areasBarChart($("#projects").val());
            BurnupLineChart($("#projects").val());
        } else {
            EpicPieChart($("#epics").val());
            EpicWeeklyAPLineChart($("#epics").val());
            areasBarChartEpic($("#epics").val());
        }
    }
</script>